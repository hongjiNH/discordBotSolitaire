export declare const APIBaseURL = "https://api.clashofclans.com/v1";
export declare const DevSiteAPIBaseURL = "https://developer.clashofclans.com/api";
export declare const ElixirTroops: string[];
export declare const DarkElixirTroops: string[];
export declare const HomeTroops: string[];
export declare const SiegeMachines: string[];
export declare const SuperTroops: string[];
export declare const ElixirSpells: string[];
export declare const DarkElixirSpells: string[];
export declare const Spells: string[];
export declare const BuilderTroops: string[];
export declare const Heroes: string[];
export declare const HeroPets: string[];
export declare const UnrankedLeagueData: {
    id: number;
    name: string;
    iconUrls: {
        small: string;
        tiny: string;
    };
};
export declare const LegendLeagueId = 29000022;
export declare const Leagues: number[];
export declare const WarLeagues: number[];
export declare const FriendlyWarPreparationTimes: readonly [number, number, number, number, number, number, number, number, number, number, number, number];
export declare const PollingEvents: {
    readonly ClanLoopStart: "clanLoopStart";
    readonly ClanLoopEnd: "clanLoopEnd";
    readonly PlayerLoopStart: "playerLoopStart";
    readonly PlayerLoopEnd: "playerLoopEnd";
    readonly WarLoopStart: "warLoopEnd";
    readonly WarLoopEnd: "warLoopEnd";
    readonly NewSeasonStart: "newSeasonStart";
    readonly MaintenanceStart: "maintenanceStart";
    readonly MaintenanceEnd: "maintenanceEnd";
    readonly Error: "error";
    readonly Debug: "debug";
};
export declare const ClientEvents: {
    readonly Error: "error";
    readonly Debug: "debug";
};
export declare const RestEvents: {
    readonly Error: "error";
    readonly Debug: "debug";
    readonly RateLimited: "rateLimited";
};
export declare const CWLRounds: {
    readonly PreviousRound: "warEnded";
    readonly CurrentRound: "inWar";
    readonly NextRound: "preparation";
};
export declare const RawData: {
    RawUnits: ({
        id: number;
        name: string;
        housingSpace: number;
        village: string;
        category: string;
        subCategory: string;
        unlock: {
            hall: number;
            cost: number;
            time: number;
            resource: string;
            building: string;
            buildingLevel: number;
        };
        trainingTime: number;
        regenerationTimes: never[];
        dps: number[];
        upgrade: {
            cost: number[];
            time: number[];
            resource: string;
        };
        seasonal: boolean;
        levels: number[];
        resourceType?: undefined;
    } | {
        id: number;
        name: string;
        housingSpace: number;
        village: string;
        category: string;
        subCategory: string;
        unlock: {
            hall: number;
            cost: number;
            time: number;
            resource: string;
            building: string;
            buildingLevel: number;
        };
        trainingTime: string;
        regenerationTimes: never[];
        dps: number[];
        upgrade: {
            cost: number[];
            time: number[];
            resource: string;
        };
        seasonal: boolean;
        levels: number[];
        resourceType?: undefined;
    } | {
        id: number;
        name: string;
        housingSpace: number;
        village: string;
        category: string;
        subCategory: string;
        unlock: {
            hall: number;
            cost: number;
            time: number;
            resource: string;
            building: string;
            buildingLevel: number;
        };
        resourceType: string;
        trainingTime: number;
        regenerationTimes: number[];
        dps: number[];
        upgrade: {
            cost: number[];
            time: number[];
            resource: string;
        };
        seasonal: boolean;
        levels: number[];
    })[];
    RawSuperUnits: {
        name: string;
        id: number;
        original: string;
        minOriginalLevel: number;
        village: string;
        duration: number;
        cooldown: number;
        resource: string;
        resourceCost: number;
        housingSpace: number;
    }[];
};
