"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _RequestHandler_keyIndex;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestHandler = void 0;
const node_https_1 = __importDefault(require("node:https"));
const node_events_1 = require("node:events");
const node_fetch_1 = __importStar(require("node-fetch"));
const Constants_1 = require("../util/Constants");
const Store_1 = require("../util/Store");
const HTTPError_1 = require("./HTTPError");
const IP_REGEX = /\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}/g;
const agent = new node_https_1.default.Agent({ keepAlive: true });
/** Represents the class that manages handlers for endpoints. */
class RequestHandler extends node_events_1.EventEmitter {
    constructor(options) {
        super();
        _RequestHandler_keyIndex.set(this, 0); // eslint-disable-line
        this.keys = options?.keys ?? [];
        this.retryLimit = options?.retryLimit ?? 0;
        this.throttler = options?.throttler ?? null;
        this.baseURL = options?.baseURL ?? Constants_1.APIBaseURL;
        this.restRequestTimeout = options?.restRequestTimeout ?? 0;
        this.rejectIfNotValid = options?.rejectIfNotValid ?? true;
        if (typeof options?.cache === 'object')
            this.cached = options.cache;
        else
            this.cached = options?.cache === true ? new Store_1.CacheStore() : null;
    }
    get _keys() {
        return Array.isArray(this.keys) ? this.keys : [this.keys];
    }
    get _key() {
        const key = this._keys[__classPrivateFieldGet(this, _RequestHandler_keyIndex, "f")];
        __classPrivateFieldSet(this, _RequestHandler_keyIndex, __classPrivateFieldGet(this, _RequestHandler_keyIndex, "f") + 1 >= this._keys.length ? 0 : __classPrivateFieldGet(this, _RequestHandler_keyIndex, "f") + 1, "f");
        return key;
    }
    setKeys(keys) {
        this.keys = keys;
        return this;
    }
    get creds() {
        return Boolean(this.email && this.password);
    }
    async request(path, options = {}) {
        const cached = this.cached ? (await this.cached.get(path)) ?? null : null;
        if (cached && options.force !== true) {
            return { data: cached.data, maxAge: cached.ttl - Date.now(), status: cached.status, path, ok: cached.status === 200 };
        }
        if (!this.throttler || options.ignoreRateLimit)
            return this.exec(path, options);
        await this.throttler.wait();
        return this.exec(path, options);
    }
    async exec(path, options = {}, retries = 0) {
        try {
            const res = await (0, node_fetch_1.default)(`${this.baseURL}${path}`, {
                agent,
                body: options.body,
                method: options.method,
                timeout: options.restRequestTimeout ?? this.restRequestTimeout,
                headers: { 'Authorization': `Bearer ${this._key}`, 'Content-Type': 'application/json' }
            });
            if (res.status === 504 && retries < (options.retryLimit ?? this.retryLimit)) {
                return await this.exec(path, options, ++retries);
            }
            const data = await res.json();
            if (this.creds &&
                res.status === 403 &&
                data.reason === 'accessDenied.invalidIp' &&
                retries < (options.retryLimit ?? this.retryLimit)) {
                const keys = await this.reValidateKeys().then(() => () => this.login());
                if (keys.length)
                    return await this.exec(path, options, ++retries);
            }
            const maxAge = Number(res.headers.get('cache-control')?.split('=')?.[1] ?? 0) * 1000;
            if (res.status === 403 && !data?.message && this.rejectIfNotValid) {
                throw new HTTPError_1.HTTPError(HTTPError_1.PrivateWarLogError, res.status, path, maxAge);
            }
            if (!res.ok && this.rejectIfNotValid) {
                throw new HTTPError_1.HTTPError(data, res.status, path, maxAge, options.method);
            }
            if (this.cached && maxAge > 0 && options.cache !== false && res.ok) {
                await this.cached.set(path, { data, ttl: Date.now() + maxAge, status: res.status }, maxAge);
            }
            return { data, maxAge, status: res.status, path, ok: res.status === 200 };
        }
        catch (error) {
            if (error instanceof node_fetch_1.FetchError && error.type === 'request-timeout' && retries < (options.retryLimit ?? this.retryLimit)) {
                return this.exec(path, options, ++retries);
            }
            if (this.rejectIfNotValid)
                throw error;
            return { data: { message: error.message }, maxAge: 0, status: 500, path, ok: false };
        }
    }
    async init(options) {
        if (!(options.email && options.password))
            throw ReferenceError('Missing email and password.');
        this.keyDescription = options.keyDescription;
        this.keyName = options.keyName ?? 'clashofclans.js.keys';
        this.keyCount = Math.min(options.keyCount ?? 1, 10);
        this.password = options.password;
        this.email = options.email;
        await this.reValidateKeys();
        return this.login();
    }
    async reValidateKeys() {
        for (const key of this.keys) {
            const res = await (0, node_fetch_1.default)(`${this.baseURL}/locations?limit=1`, {
                method: 'GET',
                timeout: 10000,
                headers: { 'Authorization': `Bearer ${key}`, 'Content-Type': 'application/json' }
            }).catch(() => null);
            if (res?.status === 403) {
                const index = this.keys.indexOf(key);
                this.keys.splice(index, 1);
                process.emitWarning(`Key #${index + 1} is no longer valid. Removed from the key list.`);
            }
        }
    }
    async login() {
        const res = await (0, node_fetch_1.default)(`${Constants_1.DevSiteAPIBaseURL}/login`, {
            method: 'POST',
            timeout: 10000,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email: this.email, password: this.password })
        });
        const data = await res.json();
        if (!res.ok)
            throw new Error(`Invalid email or password. ${JSON.stringify(data)}`);
        const ip = await this.getIp(data.temporaryAPIToken);
        if (!ip)
            throw new Error('Failed to get the IP address.');
        return this.getKeys(res.headers.get('set-cookie'), ip);
    }
    async getKeys(cookie, ip) {
        const res = await (0, node_fetch_1.default)(`${Constants_1.DevSiteAPIBaseURL}/apikey/list`, {
            method: 'POST',
            timeout: 10000,
            headers: { 'Content-Type': 'application/json', cookie }
        });
        const data = await res.json();
        if (!res.ok)
            throw new Error(`Failed to retrieve the API Keys. ${JSON.stringify(data)}`);
        // Get all available keys from the developer site.
        const keys = (data.keys ?? []);
        // Revoke keys for specified key name but not matching current IP address.
        for (const key of keys.filter((key) => key.name === this.keyName && !key.cidrRanges?.includes(ip))) {
            if (!(await this.revokeKey(key.id, cookie)))
                continue;
            const index = keys.findIndex(({ id }) => id === key.id);
            keys.splice(index, 1);
        }
        // Filter keys for current IP address and specified key name.
        for (const key of keys.filter((key) => key.name === this.keyName && key.cidrRanges?.includes(ip))) {
            if (this.keys.length >= this.keyCount)
                break;
            if (!this.keys.includes(key.key))
                this.keys.push(key.key);
        }
        // Create keys within limits (maximum of 10 keys per account)
        while (this.keys.length < this.keyCount && keys.length < 10) {
            const key = await this.createKey(cookie, ip);
            this.keys.push(key.key);
            keys.push(key);
        }
        if (this.keys.length < this.keyCount && keys.length === 10) {
            process.emitWarning(`${this.keyCount} key(s) were requested but failed to create ${this.keyCount - this.keys.length} more key(s).`);
        }
        if (!this.keys.length) {
            throw new Error([
                `${keys.length} API keys were created but none match a key name of "${this.keyName}" and IP "${ip}".`,
                `Specify a key name or go to "https://developer.clashofclans.com" to delete unused keys.`
            ].join(' '));
        }
        return this.keys;
    }
    async revokeKey(keyId, cookie) {
        const res = await (0, node_fetch_1.default)(`${Constants_1.DevSiteAPIBaseURL}/apikey/revoke`, {
            method: 'POST',
            timeout: 10000,
            body: JSON.stringify({ id: keyId }),
            headers: { 'Content-Type': 'application/json', cookie }
        });
        return res.ok;
    }
    async createKey(cookie, ip) {
        const res = await (0, node_fetch_1.default)(`${Constants_1.DevSiteAPIBaseURL}/apikey/create`, {
            method: 'POST',
            timeout: 10000,
            headers: { 'Content-Type': 'application/json', cookie },
            body: JSON.stringify({
                cidrRanges: [ip],
                name: this.keyName,
                description: this.keyDescription ?? new Date().toUTCString()
            })
        });
        const data = await res.json();
        if (!res.ok)
            throw new Error(`Failed to create API Key. ${JSON.stringify(data)}`);
        return data.key;
    }
    async getIp(token) {
        try {
            const decoded = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());
            const props = decoded.limits.find((limit) => limit.hasOwnProperty('cidrs'));
            return props.cidrs[0].match(IP_REGEX)[0];
        }
        catch {
            const body = await (0, node_fetch_1.default)('https://api.ipify.org', { timeout: 10000 }).then((res) => res.text());
            return body.match(IP_REGEX)?.[0] ?? null;
        }
    }
}
exports.RequestHandler = RequestHandler;
_RequestHandler_keyIndex = new WeakMap();
