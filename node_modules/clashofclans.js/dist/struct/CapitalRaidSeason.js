"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CapitalRaidSeason = exports.CapitalRaidSeasonMember = void 0;
const Util_1 = require("../util/Util");
class CapitalRaidSeasonMember {
    constructor(data) {
        this.tag = data.tag;
        this.name = data.name;
        this.attacks = data.attacks;
        this.attackLimit = data.attackLimit;
        this.bonusAttackLimit = data.bonusAttackLimit;
        this.capitalResourcesLooted = data.capitalResourcesLooted;
    }
}
exports.CapitalRaidSeasonMember = CapitalRaidSeasonMember;
/** Represents a Capital Raid Season. */
class CapitalRaidSeason {
    constructor(client, data) {
        this.client = client;
        this.state = data.state;
        this.startTime = Util_1.Util.formatDate(data.startTime);
        this.endTime = Util_1.Util.formatDate(data.endTime);
        this.capitalTotalLoot = data.capitalTotalLoot;
        this.raidsCompleted = data.raidsCompleted;
        this.totalAttacks = data.totalAttacks;
        this.enemyDistrictsDestroyed = data.enemyDistrictsDestroyed;
        this.offensiveReward = data.offensiveReward;
        this.defensiveReward = data.defensiveReward;
        this.attackLog = data.attackLog;
        this.defenseLog = data.defenseLog;
        this.members = (data.members ?? []).map((member) => new CapitalRaidSeasonMember(member));
    }
    /** Get {@link Player} info for every Player in the clan. */
    async fetchMembers(options) {
        return (await Promise.allSettled(this.members.map((m) => this.client.getPlayer(m.tag, { ...options, ignoreRateLimit: true }))))
            .filter((res) => res.status === 'fulfilled')
            .map((res) => res.value);
    }
}
exports.CapitalRaidSeason = CapitalRaidSeason;
