"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClanWarLeagueGroup = exports.ClanWarLeagueRound = exports.ClanWarLeagueClan = exports.ClanWarLeagueClanMember = void 0;
const Badge_1 = require("./Badge");
/** Represents a Clan War League member.  */
class ClanWarLeagueClanMember {
    constructor(data) {
        this.name = data.name;
        this.tag = data.tag;
        this.townHallLevel = data.townHallLevel;
    }
    /** Get member's formatted link to open member in-game. */
    get shareLink() {
        return `https://link.clashofclans.com/en?action=OpenPlayerProfile&tag=${this.tag.replace(/#/g, '')}`;
    }
}
exports.ClanWarLeagueClanMember = ClanWarLeagueClanMember;
/** Represents a Clan of CWL Group. */
class ClanWarLeagueClan {
    constructor(client, data) {
        this.client = client;
        this.name = data.name;
        this.tag = data.tag;
        this.level = data.clanLevel;
        this.badge = new Badge_1.Badge(data.badgeUrls);
        this.members = data.members.map((mem) => new ClanWarLeagueClanMember(mem));
    }
    /** Get {@link Player} info for every members that are in the CWL group. */
    async fetchMembers(options) {
        return (await Promise.allSettled(this.members.map((m) => this.client.getPlayer(m.tag, { ...options, ignoreRateLimit: true }))))
            .filter((res) => res.status === 'fulfilled')
            .map((res) => res.value);
    }
    /** Get clan's formatted link to open clan in-game. */
    get shareLink() {
        return `https://link.clashofclans.com/en?action=OpenClanProfile&tag=${this.tag.replace(/#/g, '')}`;
    }
}
exports.ClanWarLeagueClan = ClanWarLeagueClan;
/** Represents a Round of CWL Group. */
class ClanWarLeagueRound {
    constructor(data, round) {
        this.warTags = data.warTags;
        this.round = round + 1;
    }
}
exports.ClanWarLeagueRound = ClanWarLeagueRound;
/** Represents a CWL Group. */
class ClanWarLeagueGroup {
    constructor(client, data) {
        this.client = client;
        // @ts-expect-error
        this.state = data.state;
        this.season = data.season;
        this.clans = data.clans.map((clan) => new ClanWarLeagueClan(client, clan));
        this.rounds = data.rounds.map((round, i) => new ClanWarLeagueRound(round, i));
    }
    /** Total number of rounds for this CWL. */
    get totalRounds() {
        return this.clans.length - 1;
    }
    /**
     * This returns an array of {@link ClanWar} which fetches all wars in parallel.
     * @param clanTag Optional clan tag. If present, this will only return wars which belong to this clan.
     * @param options Override options for the request.
     */
    async getWars(clanTag, options) {
        const rounds = this.rounds.filter((round) => !round.warTags.includes('#0'));
        if (!rounds.length)
            return [];
        const warTags = rounds.map((round) => round.warTags).flat();
        const wars = await Promise.allSettled(warTags.map((warTag) => this.client.getClanWarLeagueRound({ warTag, clanTag }, { ...options, ignoreRateLimit: true })));
        return wars
            .filter((res) => res.status === 'fulfilled')
            .map((res) => res.value)
            .filter((war) => (clanTag ? war.clan.tag === clanTag : true));
    }
    /** Returns active wars (last 2) of the CWL group. */
    async getCurrentWars(clanTag, options) {
        const rounds = this.rounds.filter((round) => !round.warTags.includes('#0'));
        if (!rounds.length)
            return [];
        const warTags = rounds
            .slice(-2)
            .map((round) => round.warTags)
            .flat()
            .reverse();
        const wars = await Promise.allSettled(warTags.map((warTag) => this.client.getClanWarLeagueRound({ warTag, clanTag }, { ...options, ignoreRateLimit: true })));
        return wars
            .filter((res) => res.status === 'fulfilled')
            .map((res) => res.value)
            .filter((war) => war.clan.tag === clanTag);
    }
    /** Returns the index of the round for this specified warTag. */
    getRoundIndex(warTag) {
        return this.rounds.find((round) => round.warTags.includes(warTag))?.round ?? null;
    }
}
exports.ClanWarLeagueGroup = ClanWarLeagueGroup;
